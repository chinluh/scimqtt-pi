// Copyright (C) 2008 - INRIA
// Copyright (C) 2009 - DIGITEO

// This file is released under the 3-clause BSD license. See COPYING-BSD.

function toolbox_skeletonlib = startModule()

    TOOLBOX_NAME  = "mqtt_module";
    TOOLBOX_TITLE = "MQTT Module";

  mprintf("Start " + TOOLBOX_TITLE + "\n");

  if isdef("mqtt_modulelib") then
    warning("MQTT Module library is already loaded");
    return;
  end

  etc_tlbx  = get_absolute_file_path("mqtt_module.start");
  etc_tlbx  = getshortpathname(etc_tlbx);
  root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

//Load  functions library
// =============================================================================
  mprintf("\tLoad macros\n");
  pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
  toolbox_skeletonlib = lib(pathmacros);
  
////////////////////
   // load dependencies
    // =============================================================================
    // load dependencies on OpenCV 2.4.3
    mprintf("\tLoad dependencies\n");
    // C:\scilab\scilab-5.5.2\contrib\ArtemisModule\thirdparty\ArtemisDLL\32Bit
    MQTT_LIBS = ['libpaho-mqtt3a';'libpaho-mqtt3as';'libpaho-mqtt3c';'libpaho-mqtt3cs'];

    bDepsLoaded = %t;

    //mqttDllPath = root_tlbx + '\thirdparty\paho\windows\lib\';
	mqttDllPath = '/usr/local/lib/';
        temp = pwd();
        cd(mqttDllPath);
        //pause
        for l = 1:size(MQTT_LIBS, '*')
            //       disp('link(' + opencvDllPath + OPENCV_LIBS(l) + getdynlibext() +')');
            //      if execstr('link(opencvDllPath + OPENCV_LIBS(l) + getdynlibext())', 'errcatch') <> 0 then
            if execstr('link(MQTT_LIBS(l) + getdynlibext())', 'errcatch') <> 0 then
                bDepsLoaded = %f;
                //break;
            end
            //     disp( string(l)+ ". '+OPENCV_LIBS(l)  + " Loaded..." );
            //      pause
        end
        



        cd(temp);

 


////////////////////  

// load gateways and Java libraries
// =============================================================================
  verboseMode = ilib_verbose();
  ilib_verbose(0);
  mprintf("\tLoad gateways\n");
  exec(pathconvert(root_tlbx+"/sci_gateway/loader_gateway.sce",%f));
  //mprintf("\tLoad Java libraries\n");
  //exec(pathconvert(root_tlbx+"/src/java/loader.sce",%f));
  ilib_verbose(verboseMode);

//// load localization
//  addlocalizationdomain(TOOLBOX_NAME, root_tlbx + "/locales");

//// Load and add help chapter
//// =============================================================================
//  if or(getscilabmode() == ["NW";"STD"]) then
//    mprintf("\tLoad help\n");
//    path_addchapter = pathconvert(root_tlbx+"/jar");
//    if ( isdir(path_addchapter) <> [] ) then
//      add_help_chapter(TOOLBOX_NAME, path_addchapter, %F);
//    end
//  end
//
//// Load demos
//// =============================================================================
//  if or(getscilabmode() == ["NW";"STD"]) then
//    mprintf("\tLoad demos\n");
//    pathdemos = pathconvert(root_tlbx+"/demos/mqtt_module.dem.gateway.sce", %F, %T);
//    add_demo(TOOLBOX_TITLE, pathdemos);
//  end

//// Load Preferences GUI
//// =============================================================================
//  if getscilabmode() == "STD" then
//    addModulePreferences(TOOLBOX_TITLE, root_tlbx, etc_tlbx + "mqtt_module_preferences.xml");
//  end

endfunction

mqtt_modulelib = startModule();
clear startModule; // remove startModule on stack
